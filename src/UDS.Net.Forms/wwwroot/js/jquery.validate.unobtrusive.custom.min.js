!function (a) { "function" == typeof define && define.amd ? define("jquery.validate.unobtrusive", ["jquery-validation"], a) : "object" == typeof module && module.exports ? module.exports = a(require("jquery-validation")) : jQuery.validator.unobtrusive = a(jQuery) }((function (a) { var e, n = a.validator, t = "unobtrusiveValidation"; function i(a, e, n) { a.rules[e] = n, a.message && (a.messages[e] = a.message) } function r(a) { return a.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1") } function o(a) { return a.substr(0, a.lastIndexOf(".") + 1) } function d(a, e) { return 0 === a.indexOf("*.") && (a = a.replace("*.", e)), a } function s(e, n) { var t = a(this).find("[data-valmsg-for='" + r(n[0].name) + "']"), i = t.attr("data-valmsg-replace"), o = i ? !1 !== a.parseJSON(i) : null; t.removeClass("field-validation-valid").addClass("field-validation-error"), e.data("unobtrusiveContainer", t), o ? (t.empty(), e.removeClass("input-validation-error").appendTo(t)) : e.hide() } function l(e, n) { var t = a(this).find("[data-valmsg-summary=true]"), i = t.find("ul"); i && i.length && n.errorList.length && (i.empty(), t.addClass("validation-summary-errors").removeClass("validation-summary-valid"), a.each(n.errorList, (function () { a("<li />").html(this.message).addClass(`${this.element.id}_summary`).appendTo(i) }))) } function u(e) { var n = e.data("unobtrusiveContainer"); if (n) { var t = n.attr("data-valmsg-replace"), i = t ? a.parseJSON(t) : null; n.addClass("field-validation-valid").removeClass("field-validation-error"), e.removeData("unobtrusiveContainer"), i && n.empty() } } function m(e) { var n = a(this), t = "__jquery_unobtrusive_validation_form_reset"; if (!n.data(t)) { n.data(t, !0); try { n.data("validator").resetForm() } finally { n.removeData(t) } n.find(".validation-summary-errors").addClass("validation-summary-valid").removeClass("validation-summary-errors"), n.find(".field-validation-error").addClass("field-validation-valid").removeClass("field-validation-error").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer") } } function f(e) { var i = a(e), r = i.data(t), o = a.proxy(m, e), d = n.unobtrusive.options || {}, f = function (n, t) { var i = d[n]; i && a.isFunction(i) && i.apply(e, t) }; return r || (r = { options: { errorClass: d.errorClass || "input-validation-error", errorElement: d.errorElement || "span", errorPlacement: function () { s.apply(e, arguments), f("errorPlacement", arguments) }, invalidHandler: function () { l.apply(e, arguments), f("invalidHandler", arguments) }, messages: {}, rules: {}, success: function () { u.apply(e, arguments), f("success", arguments) } }, attachValidation: function () { i.off("reset." + t, o).on("reset." + t, o).validate(this.options) }, validate: function () { return i.validate(), i.valid() } }, i.data(t, r)), r } return n.unobtrusive = { adapters: [], parseElement: function (e, n) { var t, i, r, o = a(e), d = o.parents("form")[0]; d && ((t = f(d)).options.rules[e.name] = i = {}, t.options.messages[e.name] = r = {}, a.each(this.adapters, (function () { var n = "data-val-" + this.name, t = o.attr(n), s = {}; void 0 !== t && (n += "-", a.each(this.params, (function () { s[this] = o.attr(n + this) })), this.adapt({ element: e, form: d, message: t, params: s, rules: i, messages: r })) })), a.extend(i, { __dummy__: !0 }), n || t.attachValidation()) }, parse: function (e) { var t = a(e), i = t.parents().addBack().filter("form").add(t.find("form")).has("[data-val=true]"); t.find("[data-val=true]").each((function () { n.unobtrusive.parseElement(this, !0) })), i.each((function () { var a = f(this); a && a.attachValidation() })) } }, (e = n.unobtrusive.adapters).add = function (a, e, n) { return n || (n = e, e = []), this.push({ name: a, params: e, adapt: n }), this }, e.addBool = function (a, e) { return this.add(a, (function (n) { i(n, e || a, !0) })) }, e.addMinMax = function (a, e, n, t, r, o) { return this.add(a, [r || "min", o || "max"], (function (a) { var r = a.params.min, o = a.params.max; r && o ? i(a, t, [r, o]) : r ? i(a, e, r) : o && i(a, n, o) })) }, e.addSingleVal = function (a, e, n) { return this.add(a, [e || "val"], (function (t) { i(t, n || a, t.params[e]) })) }, n.addMethod("__dummy__", (function (a, e, n) { return !0 })), n.addMethod("regex", (function (a, e, n) { var t; return !!this.optional(e) || (t = new RegExp(n).exec(a)) && 0 === t.index && t[0].length === a.length })), n.addMethod("nonalphamin", (function (a, e, n) { var t; return n && (t = (t = a.match(/\W/g)) && t.length >= n), t })), n.methods.extension ? (e.addSingleVal("accept", "mimtype"), e.addSingleVal("extension", "extension")) : e.addSingleVal("extension", "extension", "accept"), e.addSingleVal("regex", "pattern"), e.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url"), e.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range"), e.addMinMax("minlength", "minlength").addMinMax("maxlength", "minlength", "maxlength"), e.add("equalto", ["other"], (function (e) { var n = o(e.element.name), t = d(e.params.other, n); i(e, "equalTo", a(e.form).find(":input").filter("[name='" + r(t) + "']")[0]) })), e.add("required", (function (a) { "INPUT" === a.element.tagName.toUpperCase() && "CHECKBOX" === a.element.type.toUpperCase() || i(a, "required", !0) })), e.add("remote", ["url", "type", "additionalfields"], (function (e) { var n = { url: e.params.url, type: e.params.type || "GET", data: {} }, t = o(e.element.name); a.each(function (a) { return a.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g) }(e.params.additionalfields || e.element.name), (function (i, o) { var s = d(o, t); n.data[s] = function () { var n = a(e.form).find(":input").filter("[name='" + r(s) + "']"); return n.is(":checkbox") ? n.filter(":checked").val() || n.filter(":hidden").val() || "" : n.is(":radio") ? n.filter(":checked").val() || "" : n.val() } })), i(e, "remote", n) })), e.add("password", ["min", "nonalphamin", "regex"], (function (a) { a.params.min && i(a, "minlength", a.params.min), a.params.nonalphamin && i(a, "nonalphamin", a.params.nonalphamin), a.params.regex && i(a, "regex", a.params.regex) })), e.add("fileextensions", ["extensions"], (function (a) { i(a, "extension", a.params.extensions) })), a((function () { n.unobtrusive.parse(document) })), n.unobtrusive }));